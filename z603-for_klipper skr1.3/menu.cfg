# Fork of the default Klipper display
# Copyright (C) 2022 Jonathan Harper
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

### Clock Face ###
# Main
#   + Tune
#       + Speed: 000%
#       + Flow: 000%
#       + Z Offset: 00.00
#   + Remote Print
#       + Pause printing
#       + Resume printing
#       + Abort printing
#   + Local Print
#       + Start printing
#       + Resume printing
#       + Pause printing
#       + Cancel printing
#       + SD Card
#         + ... (files)
#   + Control
#     + Homing
#       + Home All
#       + Home Z
#       + Home X/Y
#     + Disable Steppers
#     + Fan: OFF
#     + Fan speed: 000%
#     + Lights: OFF
#     + Lights: 000%
#     + Move
#       + Move X
#         + Move 0.1mm
#         + Move 1mm
#         + Move 10mm
#         + Move 25mm
#       + Move Y
#         + Move 0.1mm
#         + Move 1mm
#         + Move 10mm
#         + Move 25mm
#       + Move Z
#         + Move 0.1mm
#         + Move 1mm
#         + Move 10mm
#         + Move 25mm
#       + Extrude
#         + Extrude 0.1mm
#         + Extrude 0.25mm
#         + Extrude 1mm
#         + Extrude 10mm
#   + Temperature
#     + Hotend:000 (0000)
#     + Bed:000 (0000)
#     + Preheat PLA
#       + Preheat PLA
#       + Preheat hotend
#       + Preheat bed
#     + Preheat PETG
#       + Preheat PETG
#       + Preheat hotend
#       + Preheat bed
#     + Preheat ABS
#       + Preheat ABS
#       + Preheat hotend
#       + Preheat bed
#     + Cooldown
#   + Filament
#       + E0:000 (0000)
#       + Load fast
#       + Load slow
#       + Unload fast
#       + Unload slow
#       + Feed: 000.0
#   + Setup
#     + Bed probe
#     + PID Tune
#       + Tune hotend PID
#       + Tune bed PID
#     + Dump parameters
#     + Save config
#     + Restart
#       + Restart host
#       + Restart MCU

[menu __main __octoprint]
type: list
name: OctoPrint
enable: False

[menu __main __sdcard]
type: vsdlist
enable: {('virtual_sdcard' in printer)}
name: Virtual SD
[display_template _heater_temperature]
param_heater_name: "extruder"
text:
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "heater_bed" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% else %}
      ~extruder~
    {% endif %}
    # Show temperature
    { "%3.0f" % (heater.temperature,) }
    # Optionally show target
    {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (heater.target,) }
    {% endif %}
    ~degrees~
  {% endif %}

[display_template _fan_speed]
text:
  {% if 'fan' in printer %}
    {% set speed = printer.fan.speed %}
    {% if speed %}
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}
    { "{:>4.0%}".format(speed) }
  {% endif %}

[display_template _printing_time]
text:
  {% set ptime = printer.idle_timeout.printing_time %}
  { "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }

[display_template _print_status]
text:
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time %}
    {% set pos = printer.toolhead.position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    Ready
  {% endif %}

######################################################################
# Default 16x4 display
######################################################################

[display_data _default_16x4 extruder]
position: 0, 0
text:
  {% set active_extruder = printer.toolhead.extruder %}
  { render("_heater_temperature", param_heater_name=active_extruder) }

[display_data _default_16x4 fan]
position: 0, 10
text: { render("_fan_speed") }

[display_data _default_16x4 heater_bed]
position: 1, 0
text: { render("_heater_temperature", param_heater_name="heater_bed") }

[display_data _default_16x4 speed_factor]
position: 1, 10
text:
  ~feedrate~
  { "{:>4.0%}".format(printer.gcode_move.speed_factor) }

[display_data _default_16x4 print_progress]
position: 2, 0
text: { "{:^10.0%}".format(printer.display_status.progress) }
[display_data _default_16x4 progress_bar]
position: 2, 1 # Draw graphical progress bar after text is written
text: { draw_progress_bar(2, 0, 10, printer.display_status.progress) }

[display_data _default_16x4 printing_time]
position: 2, 10
text: { "%6s" % (render("_printing_time").strip(),) }

[display_data _default_16x4 print_status]
position: 3, 0
text: { render("_print_status") }
######################################################################
[display_glyph feedrate]
data:
  ................
  ................
  ................
  ......******....
  ....**********..
  ...****....****.
  ..***........**.
  .***..........*.
  .**..*..........
  ***...*.........
  **.....*........
  **......**......
  **......***.....
  **.......**.....
  ................
  ................

[display_glyph extruder]
data:
 ................
  ................
  ................
  .....*****......
  .....*...*......
  .....*...*......
  .....*...*......
  ...***...***....
  ...*.......*....
  ...**.....**....
  .....*...*......
  ......*.*.......
  .......*........
  .*******........
  ................
  ................

[display_glyph extruder_heat1]
data:
 ................
  ................
  ................
  .....*****......
  .....*...*......
  .....*...*......
  .....*...*......
  ...***...***....
  ...*.......*....
  ...**.....**....
  .....*...*......
  ......*.*.......
  .......*........
  .*******........
  ................
  ................


[display_glyph bed]
data:
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ...*********....
  ..*.........*...
  .*************..
  ................
  ................

[display_glyph bed_heat1]
data:
  ................
  ................
  ..*....*....*...
  .*....*....*....
  ..*....*....*...
  ...*....*....*..
  ..*....*....*...
  .*....*....*....
  ..*....*....*...
  ................
  ................
  ...*********....
  ..*.........*...
  .*************..
  ................
  ................

[display_glyph bed_heat2]
data:
  ................
  ................
  ..*....*....*...
  ...*....*....*..
  ..*....*....*...
  .*....*....*....
  ..*....*....*...
  ...*....*....*..
  ..*....*....*...
  ................
  ................
  ...*********....
  ..*.........*...
  .*************..
  ................
  ................

[display_glyph fan1]
data:
  ................
  ................
  ....***.........
  ...****....**...
  ...****...****..
  ....***..*****..
  .....*....****..
  .......**.......
  .......**.......
  ..****....*.....
  ..*****..***....
  ..****...****...
  ...**....****...
  .........***....
  ................
  ................

[display_glyph fan2]
data:
  ................
  ................
  .......****.....
  .......****.....
  .......***......
  ..**...**.......
  ..***...........
  ..****.**.****..
  ..****.**.****..
  ...........***..
  .......**...**..
  ......***.......
  .....****.......
  .....****.......
  ................
  ................


# In addition to the above glyphs, 16x4 displays also have the
# following hard-coded single character glyphs: right_arrow, degrees.

